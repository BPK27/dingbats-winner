/* Generated By:JavaCC: Do not edit this line. DingbatParser.java */
package parser;
import data_structs.Symbol;
import java.util.*;


public class DingbatParser implements DingbatParserConstants {



    TreeMap<Integer, Symbol > dingbat = new TreeMap<Integer, Symbol >();

    public TreeMap<Integer, Symbol > parse()
    {

    System.out.println("Parsing clue...");


      try
      {

        dingbat = one_line();



      }
      catch (Exception e)
      {
        System.out.println("NOK.");
      }
      return dingbat;
    }

  final public TreeMap<Integer, Symbol> one_line() throws ParseException {
  Token symbol;
  Token idNum;
  Token dir;
  Symbol s1 = new Symbol();
  Symbol s2 = new Symbol();
  TreeMap<Integer, Symbol > temp = new TreeMap<Integer, Symbol >();
  int id;
    symbol = jj_consume_token(SYMBOL);
    s1.setSym(symbol.image.toString());
    jj_consume_token(24);
    jj_consume_token(LOCATION);
    jj_consume_token(25);
    dir = jj_consume_token(POS);
    jj_consume_token(26);
        s1.setLocation(dir.image.toString());
    jj_consume_token(24);
    jj_consume_token(ANCHOR);
    jj_consume_token(25);
    idNum = jj_consume_token(ID);
    jj_consume_token(26);
    id = Integer.parseInt(idNum.image);
    s1.setID(id);
    Tags(s1);
    temp.put(s1.getID(), s1);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s2 = nextSymbol(id);
        temp.put(s2.getID(), s2);
        id = s2.getID();
    }
    jj_consume_token(27);
    {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public void Tags(Symbol s) throws ParseException {
  String rot;
  String size;
  String space;
  String style;
  String solid;
  boolean shape;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROTATION:
        rot = rotation();
                          s.setRotation(rot);
        break;
      case SIZE:
        size = size();
                      s.setSize(size);
        break;
      case SPACING:
        space = space();
                        s.setSpace(space);
        break;
      case STYLING:
        style = style();
                        s.setStyle(style);
        break;
      case SOLIDITY:
        solid = solidity();
                           s.setSolidity(solid);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(26);
      Tags(s);
      break;
    default:
      jj_la1[2] = jj_gen;

    }
  }

  final public Symbol nextSymbol(int id) throws ParseException {
  Symbol sym = new Symbol();
  int newID = id+1;
  Token symbol;
  Token dir;
  Token refID;
  Token idNum;
    symbol = jj_consume_token(SYMBOL);
                        sym.setSym(symbol.image.toString());
    jj_consume_token(24);
    jj_consume_token(LOCATION);
    jj_consume_token(25);
    dir = jj_consume_token(DIRECTION);
                       sym.setLocation(dir.image.toString()); sym.setID(newID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      refID = jj_consume_token(ID);
      jj_consume_token(29);
                           sym.setReferenceSymbol(Integer.parseInt(refID.image));
      break;
    default:
      jj_la1[3] = jj_gen;

        sym.setReferenceSymbol(id);
    }
    jj_consume_token(26);
    if (jj_2_1(2)) {
      jj_consume_token(24);
      jj_consume_token(ANCHOR);
      jj_consume_token(25);
      idNum = jj_consume_token(ID);
      jj_consume_token(26);
    id = Integer.parseInt(idNum.image);
    sym.setID(id);
    } else {

    }
    Tags(sym);
     {if (true) return sym;}
    throw new Error("Missing return statement in function");
  }

  final public int anchor(int id) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      jj_consume_token(ANCHOR);
      jj_consume_token(25);
      t = jj_consume_token(ID);
      jj_consume_token(26);
    {if (true) return Integer.parseInt(t.image);}
      break;
    default:
      jj_la1[4] = jj_gen;

    {if (true) return id++;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String rotation() throws ParseException {
  Token t;
    jj_consume_token(ROTATION);
    jj_consume_token(25);
    t = jj_consume_token(DIRECTION);
   {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String size() throws ParseException {
  Token t;
    jj_consume_token(SIZE);
    jj_consume_token(25);
    t = jj_consume_token(MEASURE);
   {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String space() throws ParseException {
 Token t;
    jj_consume_token(SPACING);
    jj_consume_token(25);
    t = jj_consume_token(MEASURE);
   {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String style() throws ParseException {
 Token t;
    jj_consume_token(STYLING);
    jj_consume_token(25);
    t = jj_consume_token(STYLE);
   {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String solidity() throws ParseException {
  Token t;
    jj_consume_token(SOLIDITY);
    jj_consume_token(25);
    t = jj_consume_token(FORMAT);
   {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public boolean shape() throws ParseException {
    jj_consume_token(SHAPE);
   {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  final public boolean contains() throws ParseException {
    jj_consume_token(CONTAINS);
    jj_consume_token(25);
    one_line();
   {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(24)) return true;
    if (jj_scan_token(ANCHOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DingbatParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0xf80,0x1000000,0x10000000,0x1000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DingbatParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DingbatParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DingbatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DingbatParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DingbatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DingbatParser(DingbatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DingbatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
